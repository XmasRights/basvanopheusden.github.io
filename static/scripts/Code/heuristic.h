#ifndef HEURISTIC_H_INCLUDED
#define HEURISTIC_H_INCLUDED
//#define DEFAULT_WEIGHTS

#include "board.h"
#include <random>
#include <vector>
#include <map>
using namespace std;

const double params[42][10]={{8.91330,0.00100,0.08701,0.01690,0.25000,1.25000,1.83610,0.12500,5.87500,12.56100},
{10.00000,0.00100,0.26573,0.03263,0.89275,0.66674,0.99245,0.50682,3.60510,16.31500},
{2.51670,0.00100,0.01354,0.01703,0.70130,1.12660,0.98271,0.60000,5.00000,30.00000},
{6.00000,0.00100,0.03958,0.01083,0.50000,0.62456,0.59038,0.36404,4.07740,10.00000},
{7.50000,0.00100,0.30000,0.02000,0.41667,0.40000,1.06580,0.19472,3.50000,15.00000},
{4.22970,0.00100,0.13333,0.02000,0.76538,0.80000,0.80000,0.30000,2.60440,15.00000},
{5.19510,0.00100,0.19100,0.01949,0.44765,0.77692,1.12990,0.31666,3.55770,19.73100},
{7.52930,0.00100,0.16934,0.01809,1.10300,0.69410,1.23530,0.32604,3.14890,15.94100},
{3.10390,0.00100,0.08313,0.01000,1.00000,0.68253,0.87067,0.30000,3.50000,15.00000},
{6.98120,0.00100,0.38544,0.01000,0.92184,1.08510,0.55815,0.32223,3.96480,16.33300},
{6.66670,0.00100,0.20000,0.01833,0.40007,0.88888,1.00000,0.28582,2.89050,15.00000},
{3.98660,0.00183,0.00000,0.01000,0.32824,0.54139,1.03070,0.46730,3.10120,32.74800},
{4.55130,0.00100,0.24444,0.01000,1.20990,-0.22012,0.88506,0.27545,2.96300,8.30910},
{10.00000,0.00100,0.20000,0.02667,1.00000,0.85471,0.99999,0.50000,2.77780,15.00000},
{6.88330,0.00203,0.30000,0.02667,0.59046,0.83380,0.88281,0.34444,2.50000,15.00000},
{7.00000,0.00250,0.20042,0.02333,0.99999,0.80000,0.49593,0.60000,5.00000,15.00000},
{2.51670,0.00500,0.20000,0.02754,0.57485,0.63830,1.00000,0.60000,7.79930,20.00000},
{1.71000,0.00100,0.20314,0.06684,0.99845,0.69731,1.00780,0.59490,3.51760,20.08200},
{6.83330,0.00815,0.17904,0.01662,0.25000,0.22221,1.47950,0.33333,4.20070,15.00000},
{4.14680,0.00100,0.11918,0.01999,0.94574,1.47400,1.25760,0.33353,2.50050,19.99800},
{1.85650,0.00928,0.10645,0.02453,0.46089,0.76938,0.99272,0.33317,5.41150,68.59600},
{7.00000,0.00500,0.20000,0.02000,0.93361,0.80000,0.66236,0.30000,3.24040,15.00000},
{4.46580,0.00100,0.20027,0.01000,1.22230,0.75282,1.38430,0.60032,3.33440,15.00600},
{4.82130,0.00500,0.10000,0.01000,0.76649,0.40000,1.00000,0.30000,2.50000,15.00000},
{6.65890,0.01000,0.30000,0.01000,1.00000,0.40000,1.00000,0.66667,3.50000,20.00000},
{6.75330,0.00615,0.17991,0.03625,0.48819,0.44372,1.39580,0.08183,4.89070,7.16210},
{3.00000,0.00500,0.28181,0.01621,0.92328,1.90000,0.88170,0.30000,4.66670,20.00000},
{3.24380,0.01525,0.29090,0.02250,1.10940,0.68750,0.87500,0.38125,3.55210,9.31250},
{0.10000,0.01115,0.20000,0.02000,0.52826,0.80000,1.00000,0.30000,5.00000,30.00000},
{2.51670,0.00500,0.20000,0.01926,0.50000,0.80000,1.00000,0.60000,3.68250,21.46300},
{2.94620,0.00100,0.23698,0.04000,0.74998,0.68944,0.92159,0.39998,2.74190,15.00000},
{0.10000,0.00373,0.40000,0.01500,2.00000,1.00000,0.80000,0.30000,2.50000,15.00000},
{3.00000,0.00500,0.20000,0.01971,0.99999,1.18590,1.00000,0.25282,3.33330,15.00000},
{2.51670,0.00100,0.20000,0.02000,0.35859,0.80000,1.00000,0.30000,2.72680,15.00000},
{4.63600,0.01000,0.40000,0.01000,0.99319,0.76472,1.11110,0.31111,4.66660,18.33300},
{0.10000,0.01008,0.34177,0.03044,0.98665,0.81374,1.01530,0.29008,4.97330,14.87800},
{6.76900,0.00505,0.58509,0.01000,2.94880,0.02168,0.52376,0.27402,2.81840,15.46800},
{0.84579,0.00497,0.19461,0.01838,0.66296,0.40277,0.97366,0.30890,2.54610,20.03500},
{5.11750,0.00631,0.51467,0.01920,1.13730,0.69986,1.03980,0.27411,4.80370,15.31900},
{1.74480,0.02252,0.20000,0.02846,1.02260,-0.26625,1.04820,0.34074,2.13280,17.03700},
{6.46320,0.00500,0.24270,0.02107,1.17510,0.43932,0.48067,0.29370,3.77030,16.74400},
{3.00000,0.00550,0.20000,0.02000,0.99999,0.17814,0.68676,0.40000,2.50000,9.57750}};

struct pattern{
  uint64 pieces;
  uint64 pieces_empty;
  int n;
  double weight_act;
  double weight_pass;
  double drop_rate;
  int ind;
  pattern(uint64,uint64,int,double*,double*,double*,int);
  bool is_active(board&);
  bool contained(board&);
  bool contained(board&,bool);
  bool just_active(board&);
  bool isempty(uint64);
  uint64 missing_pieces(board&,bool);
  double diff_act_pass();
  void update(double*,double*,double*);
};

class heuristic{
  public:
    static const unsigned int Nweights=17;
    double center_weight;
    double w_act[Nweights];
    double w_pass[Nweights];
    double delta[Nweights];
    unsigned int Nfeatures;
    double D0,K0;
    double stopping_thresh,pruning_thresh,gamma,lapse_rate,opp_scale;
    double exploration_constant;
    bool self;
    int iterations;
    double tree_stats[4];
    vector<pattern> feature;
    vector<pattern> feature_backup;
    map<uint64,double> vtile;
    //vector<pattern> feature_backup2;
    mt19937_64 engine;
    geometric_distribution<int> iter_dist;
    normal_distribution<double> noise;
    bernoulli_distribution lapse;
    heuristic();
    void get_params_from_file(char*,int);
    void get_params_from_file(char*,int,int);
    void get_params_from_matlab(double*);
    void get_params(const double*);
    void get_features_from_file(char*);
    void addfeature(uint64, int );
    void addfeature(uint64, uint64, int , int );
    void update();
    void seed_generator(mt19937_64);
    void update_weights();
    double evaluate(board, zet);
    double evaluate(board);
    vector<zet> get_pruned_moves(board&, bool);
    vector<zet> get_moves(board&, bool, bool);
    zet makerandommove(board,bool);
    zet makemove_bfs(board,bool);
    int playout(board,bool);
    void remove_features();
    void restore_features();
    void eliminate_noise();
};

#endif // HEURISTIC_H_INCLUDED
